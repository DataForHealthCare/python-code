# Thoughts/ideas:
# - Do we want null replacement in standardized? ---> Yes, but not as part of validation, do this in table creation (SQL)
# - How do we want to handle specific check? Ex-> Check # of POS codes and see if its similar to expected amount

# USAGE: 
# 1. Fill in any fields denoted by add_<field>_here.
# 2. Enter the schema where the new table will reside.
# 3. Enter the name of the table that will be created.
# 4. Enter a table comment describing the table that is being created.
# 5. For each column that will be in the new table, fill in column names, types and a comment.
#   - Copy and paste the following column template as necessary to add additional columns. (don't forget to uncomment after paste):

        # add_column_name_here: 
        #     type: add_type_here
        #     comment: add_comment_here

#   - This data types allowed for columns are as follows:
        # BIGINT: A 64-bit integer that does not allow nulls.
        # BINARY: A fixed-length binary value that can be up to 50 bytes in length.
        # BOOLEAN: A boolean value that defaults to true.
        # CHAR: A character string of fixed length that can be up to 10 characters long.
        # DATE: A date value.
        # DECIMAL: A fixed-point decimal value with a precision of 10 and a scale of 2.
        # DOUBLE PRECISION: A 64-bit floating-point value.
        # FLOAT: A floating-point value with a precision of 10.
        # INTEGER: A 32-bit integer.
        # SMALLINT: A 16-bit integer.
        # STRING: A variable-length character string.
        # TIMESTAMP: A timestamp value.
        # VARCHAR: A variable-length character string that can be up to 50 characters long.
# 6. Next specify the names of the columns that will be included in the primary key.
# 7. Enter the names of any additional columns that will be specified as not allowing nulls.
#   - NOTE: DO NOT ADD PRIMARY KEY COLUNMS AS ADDITIONAL NOT NULL COLUMNS, NULL CONSTRAINTS ARE ADDED FOR PK COLUMNS SEPARATELY
#   - If you don't require any additional columns to not allow nulls, remove ALL lines below "additional_not_null_columns:" and above "data_completeness_warning_threshold"
# 8. Enter thresholds for data_completeness:
#   - data_completeness_warning_threshold: if the source data is less than this percentage of rows in the target data, a warning is sent
#   - data_completeness_error_threshold: if the source data is less than this percentage of rows in the target data, an error is raised
# 9. Enter thresholds for source population checks:
#   - source_populated_warning_num_obs: if source data contains fewer rows than this value, a warning is sent
#   - source_populated_error_num_obs: if the source data contains fewer rows than this value, an error is raised
# 10. Enter a value for the number of invalid dates allowed.
#   - If the source data contains more invalid dates than bad_dates_allowed, an error is raised.
#   - If the source data contains invalid dates, but not more than bad_dates_allowed, a warning is sent
# 11. Once all fields have been filled in, switch back to the cdc_sql_template notebook and continue following the instuctions

schema: add_schema_name_here
table:
    name: add_table_name_here
    comment: add_table_comment_here
    columns:
        add_column_name_here: 
            type: add_type_here
            comment: add_comment_here
        add_column_name_here: 
            type: add_type_here
            comment: add_comment_here
        add_column_name_here: 
            type: add_type_here
            comment: add_comment_here
        add_column_name_here: 
            type: add_type_here
            comment: add_comment_here
    primary_keys: 
        pk_column_1: add_primary_key_column_name_here
        pk_column_2: add_primary_key_column_name_here
    additional_not_null_columns:
        null_col1: add_non_null_column_name_here

data_completeness_warning_threshold: 0.75
data_completeness_error_threshold: 0.05

source_populated_warning_num_obs: 2
source_populated_error_num_obs: 1

bad_dates_allowed: 17
